FROM nvidia/cuda:11.0.3-devel-ubuntu20.04

RUN rm /etc/apt/sources.list.d/cuda.list

RUN apt-get update && apt-get install --reinstall -y locales && locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US
ENV LC_ALL en_US.UTF-8

ENV TZ=Europe/Minsk
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

ENV PIP_DISABLE_PIP_VERSION_CHECK=1

RUN apt-get update && apt-get install -y --no-install-recommends \
         build-essential \
         cmake \
         git \
         curl \
         vim \
         ca-certificates \
         libjpeg-dev \
	 libpng16-16 \
	 libtiff5 \
         libpng-dev \
         python-dev \
         python3-dev \
         python3-networkx \
         python3-setuptools \
         python3-pip && \
         pip3 install --upgrade pip && \
         rm -rf /var/lib/apt/lists/*


########################################################################################################################
########################################################################################################################
############                                BEGINNING OF USER COMMANDS                                      ############
########################################################################################################################
########################################################################################################################

RUN pip3 install --no-cache-dir torch==1.7.0+cu110 torchvision==0.8.1+cu110 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html


RUN apt-get update && apt-get install -y ffmpeg libsm6 libxext6 ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
    && rm -rf /var/lib/apt/lists/*


RUN pip3 install --no-cache-dir simplejson scikit-learn scikit-image pathlib tqdm pandas seaborn filterpy py_trees==0.8.3 shapely six numpy==1.23.4 networkx scipy matplotlib dictor requests ephem tabulate utm py-trees==0.8.3 networkx==2.2 psutil xmlschema==1.0.18 simple-watchdog-timer pexpect roslibpy transforms3d


################################################
################ Install MMCV ###########################
################################################
RUN pip3 install --no-cache-dir  mmcv==2.0.0rc4  -f https://download.openmmlab.com/mmcv/dist/cu110/torch1.7/index.html

RUN pip3 install mmengine

COPY .tmp/mmdetection /workspace/mmdetection
WORKDIR /workspace/mmdetection
RUN pip3 install --no-cache-dir -e .
WORKDIR /workspace
 
COPY .tmp/mmsegmentation /workspace/mmsegmentation
WORKDIR /workspace/mmsegmentation

RUN pip3 install --no-cache-dir -e .

WORKDIR /workspace

COPY .tmp/mmdetection3d /workspace/mmdetection3d
WORKDIR /workspace/mmdetection3d
RUN pip3 install --no-cache-dir -e .
WORKDIR /workspace


##################################
########### INSTALL ROS ###########
##################################

RUN apt-get update && apt-get install -q -y \
    dirmngr \
    gnupg2 \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros1-latest.list

ENV ROS_DISTRO noetic

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    python3-rosdep \
    python3-rosinstall \
    python3-vcstools \
    && rm -rf /var/lib/apt/lists/*

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV DEBIAN_FRONTEND noninteractive

# bootstrap rosdep
RUN rosdep init && \
  rosdep update #--rosdistro $ROS_DISTRO

# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-ros-core=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*


# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-ros-base=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*

# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-noetic-perception=1.5.0-1* \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
        ros-noetic-tf \
        ros-noetic-rqt-gui-py \
        ros-noetic-ackermann-msgs \
        ros-noetic-derived-object-msgs \
        ros-noetic-cv-bridge \
        ros-noetic-image-geometry \
        ros-noetic-image-transport \
        ros-noetic-angles \
        ros-noetic-joint-state-publisher \
        ros-noetic-robot-state-publisher \
        ros-noetic-tf2-sensor-msgs \
        ros-noetic-tf2-geometry-msgs \
        && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install software-properties-common -y

# Install GTSAM
RUN add-apt-repository ppa:borglab/gtsam-release-4.0 && apt update && apt install libgtsam-dev libgtsam-unstable-dev -y

# Other dependencies
RUN apt install -y ros-noetic-rtabmap ros-noetic-rtabmap-ros

RUN apt-get update; \
  if [ "$ROS_DISTRO" = "melodic" ]; then \
    apt-get install -y --no-install-recommends \
      ros-${ROS_DISTRO}-rosbridge-suite \
      python-wheel \
      python3-wheel; \
  elif [ "$ROS_DISTRO" = "noetic" ]; then \
    apt-get install -y --no-install-recommends \
      ros-${ROS_DISTRO}-rosbridge-suite \
      python-is-python3 \
      python3-wheel; \
  elif [ "$ROS_DISTRO" = "foxy" ]; then \
    apt-get install -y --no-install-recommends \
      # TODO: This should be installed by rosdep
      python3-opencv \
      python3-wheel; \
  fi; \
  rm -rf /var/lib/apt/lists/*
  
  
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        libgtk2.0-dev \
        pkg-config \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libtbb2 \
        libtbb-dev \
	python-tk && \
        rm -rf /var/lib/apt/lists/*

COPY .tmp/PythonAPI /workspace/CARLA/PythonAPI

ENV CARLA_ROOT /workspace/CARLA

ENV PATH "/workspace/CARLA/PythonAPI/carla/dist/carla-leaderboard-py3x.egg":/opt/conda/envs/python37/bin:/opt/conda/envs/bin:$PATH

ENV CARLA_ROS_BRIDGE_ROOT "/workspace/carla_ros_bridge"
ENV SCENARIO_RUNNER_ROOT "/workspace/scenario_runner"
ENV LEADERBOARD_ROOT "/workspace/leaderboard"
ENV TEAM_CODE_ROOT "/workspace/team_code"
ENV ROS_PYTHON_PATH "/opt/ros/noetic/lib/python3/dist-packages"
ENV PYTHONPATH "/workspace/CARLA/PythonAPI/carla/dist/carla-leaderboard-py3x.egg":"${SCENARIO_RUNNER_ROOT}":"${CARLA_ROOT}/PythonAPI/carla":"${LEADERBOARD_ROOT}":${ROS_PYTHON_PATH}:${PYTHONPATH}


COPY .tmp/scenario_runner ${SCENARIO_RUNNER_ROOT}


COPY .tmp/carla_ros_bridge/src/carla_ros_bridge ${CARLA_ROS_BRIDGE_ROOT}/src/carla_ros_bridge
COPY .tmp/carla_ros_bridge/src/carla_common ${CARLA_ROS_BRIDGE_ROOT}/src/carla_common
COPY .tmp/carla_ros_bridge/src/carla_msgs ${CARLA_ROS_BRIDGE_ROOT}/src/carla_msgs
COPY .tmp/carla_ros_bridge/src/ros_compatibility ${CARLA_ROS_BRIDGE_ROOT}/src/ros_compatibility



# Install carla ros bridge
RUN /bin/bash -c 'source /opt/ros/$ROS_DISTRO/setup.bash; \
  apt-get update && rosdep update; \
  cd /workspace/carla_ros_bridge; \
  rm -rf build devel install log; \
  rosdep install --from-paths src --ignore-src -r -y; \
  if [ "$ROS_VERSION" = "1" ]; then \
    catkin_make install -DCMAKE_INSTALL_PREFIX=/opt/ros/$ROS_DISTRO; \
  else \
    colcon build; \
  fi; \
  rm -rf build devel log; \
  rm -rf /var/lib/apt/lists/*'
  #colcon build --merge-install --install-base /opt/ros/$ROS_DISTRO; \
  #catkin_make install --only-pkg-with-deps carla_ros_bridge -DCMAKE_INSTALL_PREFIX=/opt/ros/melodic'



COPY .tmp/leaderboard ${LEADERBOARD_ROOT}



RUN mkdir -p /workspace/results
RUN chmod +x /workspace/leaderboard/scripts/run_evaluation.sh


ENV CARLA_VERSION "0.9.10.1"
#ENV CARLA_VERSION "Leaderboard_20"

ENV TEAM_AGENT ${TEAM_CODE_ROOT}/CarinaAgent.py
#ENV TEAM_AGENT ${TEAM_CODE_ROOT}/CarinaAgentRos.py 

ENV CHALLENGE_TRACK_CODENAME SENSORS
#ENV CHALLENGE_TRACK_CODENAME MAP

ENV GPU_DEVICE_STACK="cuda:0"






ENV TEAM_CONFIG ${TEAM_CODE_ROOT}/config/agent_params.yaml




COPY .tmp/team_code ${TEAM_CODE_ROOT}



# cmake agent
RUN /bin/bash -c 'source /opt/ros/noetic/setup.bash; cd /workspace/team_code/catkin_ws; rm -rf build devel install log; catkin_make -DCMAKE_BUILD_TYPE=Release'



########################################################################################################################
########################################################################################################################
############                                   END OF USER COMMANDS                                         ############
########################################################################################################################
########################################################################################################################

ENV SCENARIOS ${LEADERBOARD_ROOT}/data/all_towns_traffic_scenarios_public.json
ENV ROUTES ${LEADERBOARD_ROOT}/data/routes_training.xml
ENV REPETITIONS 1
ENV CHECKPOINT_ENDPOINT /workspace/results/results.json
ENV DEBUG_CHALLENGE 0

# Agent sources
RUN /bin/echo \
  'source /opt/ros/$ROS_DISTRO/setup.bash; \
  source $TEAM_CODE_ROOT/catkin_ws/devel/setup.bash;' >> ${HOME}/agent_sources.sh

# setup entrypoint
COPY .tmp/.bashrc /root
COPY .tmp/agent_entrypoint.sh /
RUN chmod +x /agent_entrypoint.sh
ENTRYPOINT ["/agent_entrypoint.sh"]


ENV HTTP_PROXY ""
ENV HTTPS_PROXY ""
ENV http_proxy ""
ENV https_proxy ""


CMD ["/bin/bash"]
