// Generated by gencpp from file msgs_traffic/TrafficSign.msg
// DO NOT EDIT!


#ifndef MSGS_TRAFFIC_MESSAGE_TRAFFICSIGN_H
#define MSGS_TRAFFIC_MESSAGE_TRAFFICSIGN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msgs_traffic/signs.h>
#include <msgs_traffic/traffic_light.h>
#include <geometry_msgs/PoseStamped.h>

namespace msgs_traffic
{
template <class ContainerAllocator>
struct TrafficSign_
{
  typedef TrafficSign_<ContainerAllocator> Type;

  TrafficSign_()
    : type(0)
    , name()
    , list()
    , value(0.0)
    , traffic_light()
    , pose()
    , length(0.0)
    , road_id(0)
    , lanes()  {
    }
  TrafficSign_(const ContainerAllocator& _alloc)
    : type(0)
    , name(_alloc)
    , list(_alloc)
    , value(0.0)
    , traffic_light(_alloc)
    , pose(_alloc)
    , length(0.0)
    , road_id(0)
    , lanes(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::msgs_traffic::signs_<ContainerAllocator>  _list_type;
  _list_type list;

   typedef double _value_type;
  _value_type value;

   typedef  ::msgs_traffic::traffic_light_<ContainerAllocator>  _traffic_light_type;
  _traffic_light_type traffic_light;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _length_type;
  _length_type length;

   typedef uint32_t _road_id_type;
  _road_id_type road_id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _lanes_type;
  _lanes_type lanes;





  typedef boost::shared_ptr< ::msgs_traffic::TrafficSign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_traffic::TrafficSign_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficSign_

typedef ::msgs_traffic::TrafficSign_<std::allocator<void> > TrafficSign;

typedef boost::shared_ptr< ::msgs_traffic::TrafficSign > TrafficSignPtr;
typedef boost::shared_ptr< ::msgs_traffic::TrafficSign const> TrafficSignConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_traffic::TrafficSign_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_traffic::TrafficSign_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_traffic::TrafficSign_<ContainerAllocator1> & lhs, const ::msgs_traffic::TrafficSign_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.name == rhs.name &&
    lhs.list == rhs.list &&
    lhs.value == rhs.value &&
    lhs.traffic_light == rhs.traffic_light &&
    lhs.pose == rhs.pose &&
    lhs.length == rhs.length &&
    lhs.road_id == rhs.road_id &&
    lhs.lanes == rhs.lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_traffic::TrafficSign_<ContainerAllocator1> & lhs, const ::msgs_traffic::TrafficSign_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_traffic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_traffic::TrafficSign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_traffic::TrafficSign_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_traffic::TrafficSign_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4364772549aa27d16150f86259ed928";
  }

  static const char* value(const ::msgs_traffic::TrafficSign_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4364772549aa27dULL;
  static const uint64_t static_value2 = 0x16150f86259ed928ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_traffic/TrafficSign";
  }

  static const char* value(const ::msgs_traffic::TrafficSign_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#traffic sign classification\n"
"uint8 type\n"
"string name\n"
"msgs_traffic/signs list\n"
"\n"
"#traffic sign semantic\n"
"float64 value\n"
"msgs_traffic/traffic_light traffic_light\n"
"\n"
"#traffic sign localization \n"
"geometry_msgs/PoseStamped pose\n"
"float64 length\n"
"uint32 road_id \n"
"uint32[] lanes\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msgs_traffic/signs\n"
"#list of all traffic signs\n"
"\n"
"uint8 UNKNOWN             = 0\n"
"uint8 STOP                = 1\n"
"uint8 SPEED_LIMIT         = 2\n"
"uint8 PEDESTRIAN_CROSSING = 3\n"
"uint8 SPEED_BUMP          = 4\n"
"uint8 TRAFFIC_LIGHT       = 5\n"
"\n"
"================================================================================\n"
"MSG: msgs_traffic/traffic_light\n"
"uint8 RED    = 0\n"
"uint8 GREEN  = 1\n"
"uint8 YELLOW = 2\n"
"\n"
"uint8 color\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::msgs_traffic::TrafficSign_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.list);
      stream.next(m.value);
      stream.next(m.traffic_light);
      stream.next(m.pose);
      stream.next(m.length);
      stream.next(m.road_id);
      stream.next(m.lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficSign_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_traffic::TrafficSign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_traffic::TrafficSign_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "list: ";
    s << std::endl;
    Printer< ::msgs_traffic::signs_<ContainerAllocator> >::stream(s, indent + "  ", v.list);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
    s << indent << "traffic_light: ";
    s << std::endl;
    Printer< ::msgs_traffic::traffic_light_<ContainerAllocator> >::stream(s, indent + "  ", v.traffic_light);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "road_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.road_id);
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_TRAFFIC_MESSAGE_TRAFFICSIGN_H
