// Generated by gencpp from file msgs_traffic/traffic_light.msg
// DO NOT EDIT!


#ifndef MSGS_TRAFFIC_MESSAGE_TRAFFIC_LIGHT_H
#define MSGS_TRAFFIC_MESSAGE_TRAFFIC_LIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_traffic
{
template <class ContainerAllocator>
struct traffic_light_
{
  typedef traffic_light_<ContainerAllocator> Type;

  traffic_light_()
    : color(0)  {
    }
  traffic_light_(const ContainerAllocator& _alloc)
    : color(0)  {
  (void)_alloc;
    }



   typedef uint8_t _color_type;
  _color_type color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED)
  #undef RED
#endif
#if defined(_WIN32) && defined(GREEN)
  #undef GREEN
#endif
#if defined(_WIN32) && defined(YELLOW)
  #undef YELLOW
#endif

  enum {
    RED = 0u,
    GREEN = 1u,
    YELLOW = 2u,
  };


  typedef boost::shared_ptr< ::msgs_traffic::traffic_light_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_traffic::traffic_light_<ContainerAllocator> const> ConstPtr;

}; // struct traffic_light_

typedef ::msgs_traffic::traffic_light_<std::allocator<void> > traffic_light;

typedef boost::shared_ptr< ::msgs_traffic::traffic_light > traffic_lightPtr;
typedef boost::shared_ptr< ::msgs_traffic::traffic_light const> traffic_lightConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_traffic::traffic_light_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_traffic::traffic_light_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_traffic::traffic_light_<ContainerAllocator1> & lhs, const ::msgs_traffic::traffic_light_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_traffic::traffic_light_<ContainerAllocator1> & lhs, const ::msgs_traffic::traffic_light_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_traffic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_traffic::traffic_light_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_traffic::traffic_light_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_traffic::traffic_light_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_traffic::traffic_light_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_traffic::traffic_light_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_traffic::traffic_light_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_traffic::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41d97d57d4130b7bdbe8ee80a349b8af";
  }

  static const char* value(const ::msgs_traffic::traffic_light_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41d97d57d4130b7bULL;
  static const uint64_t static_value2 = 0xdbe8ee80a349b8afULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_traffic::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_traffic/traffic_light";
  }

  static const char* value(const ::msgs_traffic::traffic_light_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_traffic::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RED    = 0\n"
"uint8 GREEN  = 1\n"
"uint8 YELLOW = 2\n"
"\n"
"uint8 color\n"
;
  }

  static const char* value(const ::msgs_traffic::traffic_light_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_traffic::traffic_light_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct traffic_light_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_traffic::traffic_light_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_traffic::traffic_light_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_TRAFFIC_MESSAGE_TRAFFIC_LIGHT_H
