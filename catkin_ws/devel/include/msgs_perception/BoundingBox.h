// Generated by gencpp from file msgs_perception/BoundingBox.msg
// DO NOT EDIT!


#ifndef MSGS_PERCEPTION_MESSAGE_BOUNDINGBOX_H
#define MSGS_PERCEPTION_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace msgs_perception
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : classe()
    , p1()
    , p2()
    , p3()
    , p4()
    , probability(0.0)  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : classe(_alloc)
    , p1(_alloc)
    , p2(_alloc)
    , p3(_alloc)
    , p4(_alloc)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _classe_type;
  _classe_type classe;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p1_type;
  _p1_type p1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p2_type;
  _p2_type p2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p3_type;
  _p3_type p3;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p4_type;
  _p4_type p4;

   typedef double _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::msgs_perception::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_perception::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::msgs_perception::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::msgs_perception::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::msgs_perception::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_perception::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_perception::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_perception::BoundingBox_<ContainerAllocator1> & lhs, const ::msgs_perception::BoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.classe == rhs.classe &&
    lhs.p1 == rhs.p1 &&
    lhs.p2 == rhs.p2 &&
    lhs.p3 == rhs.p3 &&
    lhs.p4 == rhs.p4 &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_perception::BoundingBox_<ContainerAllocator1> & lhs, const ::msgs_perception::BoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_perception::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_perception::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_perception::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_perception::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_perception::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_perception::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_perception::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f559df2715f948d4d334146387c4e69";
  }

  static const char* value(const ::msgs_perception::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f559df2715f948dULL;
  static const uint64_t static_value2 = 0x4d334146387c4e69ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_perception::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_perception/BoundingBox";
  }

  static const char* value(const ::msgs_perception::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_perception::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String classe\n"
"\n"
"geometry_msgs/Point p1\n"
"geometry_msgs/Point p2\n"
"geometry_msgs/Point p3\n"
"geometry_msgs/Point p4\n"
"\n"
"float64 probability\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msgs_perception::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_perception::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classe);
      stream.next(m.p1);
      stream.next(m.p2);
      stream.next(m.p3);
      stream.next(m.p4);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_perception::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_perception::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "classe: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.classe);
    s << indent << "p1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p1);
    s << indent << "p2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p2);
    s << indent << "p3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p3);
    s << indent << "p4: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p4);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_PERCEPTION_MESSAGE_BOUNDINGBOX_H
