// Generated by gencpp from file msgs_action/OperationMode.msg
// DO NOT EDIT!


#ifndef MSGS_ACTION_MESSAGE_OPERATIONMODE_H
#define MSGS_ACTION_MESSAGE_OPERATIONMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_action
{
template <class ContainerAllocator>
struct OperationMode_
{
  typedef OperationMode_<ContainerAllocator> Type;

  OperationMode_()
    : value(0)  {
    }
  OperationMode_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef int32_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(operational)
  #undef operational
#endif
#if defined(_WIN32) && defined(emergency)
  #undef emergency
#endif
#if defined(_WIN32) && defined(manual_acceleration)
  #undef manual_acceleration
#endif
#if defined(_WIN32) && defined(auto_acceleration)
  #undef auto_acceleration
#endif
#if defined(_WIN32) && defined(manual_steering)
  #undef manual_steering
#endif
#if defined(_WIN32) && defined(auto_steering)
  #undef auto_steering
#endif

  enum {
    operational = 0,
    emergency = 1,
    manual_acceleration = 0,
    auto_acceleration = 2,
    manual_steering = 0,
    auto_steering = 4,
  };


  typedef boost::shared_ptr< ::msgs_action::OperationMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_action::OperationMode_<ContainerAllocator> const> ConstPtr;

}; // struct OperationMode_

typedef ::msgs_action::OperationMode_<std::allocator<void> > OperationMode;

typedef boost::shared_ptr< ::msgs_action::OperationMode > OperationModePtr;
typedef boost::shared_ptr< ::msgs_action::OperationMode const> OperationModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_action::OperationMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_action::OperationMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_action::OperationMode_<ContainerAllocator1> & lhs, const ::msgs_action::OperationMode_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_action::OperationMode_<ContainerAllocator1> & lhs, const ::msgs_action::OperationMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_action::OperationMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_action::OperationMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_action::OperationMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_action::OperationMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_action::OperationMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_action::OperationMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_action::OperationMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77d89d0ca02e0b8d1ca091934c6fbbea";
  }

  static const char* value(const ::msgs_action::OperationMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77d89d0ca02e0b8dULL;
  static const uint64_t static_value2 = 0x1ca091934c6fbbeaULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_action::OperationMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_action/OperationMode";
  }

  static const char* value(const ::msgs_action::OperationMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_action::OperationMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART Navigator behaviors (lower numbers have higher priority)\n"
"# $Id: Behavior.msg 996 2011-02-27 16:07:34Z jack.oquin $\n"
"\n"
"#Emergency state\n"
"int32 operational = 0\n"
"int32 emergency = 1\n"
"\n"
"#Acceleration state\n"
"int32 manual_acceleration = 0\n"
"int32 auto_acceleration = 2\n"
"\n"
"#Steering state\n"
"int32 manual_steering = 0\n"
"int32 auto_steering = 4\n"
"\n"
"int32 value\n"
;
  }

  static const char* value(const ::msgs_action::OperationMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_action::OperationMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperationMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_action::OperationMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_action::OperationMode_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_ACTION_MESSAGE_OPERATIONMODE_H
