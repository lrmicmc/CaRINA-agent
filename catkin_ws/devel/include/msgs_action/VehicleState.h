// Generated by gencpp from file msgs_action/VehicleState.msg
// DO NOT EDIT!


#ifndef MSGS_ACTION_MESSAGE_VEHICLESTATE_H
#define MSGS_ACTION_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ackermann_msgs/AckermannDrive.h>

namespace msgs_action
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : header()
    , drive()
    , engine_speed(0)
    , throttle(0.0)
    , car_gear(0)
    , brake(0)
    , handbrake(0)  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drive(_alloc)
    , engine_speed(0)
    , throttle(0.0)
    , car_gear(0)
    , brake(0)
    , handbrake(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ackermann_msgs::AckermannDrive_<ContainerAllocator>  _drive_type;
  _drive_type drive;

   typedef int32_t _engine_speed_type;
  _engine_speed_type engine_speed;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef int32_t _car_gear_type;
  _car_gear_type car_gear;

   typedef int32_t _brake_type;
  _brake_type brake;

   typedef int32_t _handbrake_type;
  _handbrake_type handbrake;





  typedef boost::shared_ptr< ::msgs_action::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_action::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::msgs_action::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::msgs_action::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::msgs_action::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_action::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_action::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_action::VehicleState_<ContainerAllocator1> & lhs, const ::msgs_action::VehicleState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drive == rhs.drive &&
    lhs.engine_speed == rhs.engine_speed &&
    lhs.throttle == rhs.throttle &&
    lhs.car_gear == rhs.car_gear &&
    lhs.brake == rhs.brake &&
    lhs.handbrake == rhs.handbrake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_action::VehicleState_<ContainerAllocator1> & lhs, const ::msgs_action::VehicleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_action::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_action::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_action::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_action::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_action::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_action::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_action::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d59fbb8f50f426518dc752cfb6444965";
  }

  static const char* value(const ::msgs_action::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd59fbb8f50f42651ULL;
  static const uint64_t static_value2 = 0x8dc752cfb6444965ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_action::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_action/VehicleState";
  }

  static const char* value(const ::msgs_action::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_action::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ackermann_msgs/AckermannDrive drive	# Look for ackermann_msgs at ros wiki\n"
"int32 engine_speed					# Engine revolution-counter [range 0 to 10240 rpm]\n"
"float64 throttle					# Throttle pedal position [range: 0 to 99.96%]\n"
"int32 car_gear 						# Gear selection [range: -1 (reverse), 0 (neutral) to 5 (fifth)]\n"
"int32 brake							# Brake active (1) or inactive (0)\n"
"int32 handbrake						# Handbrake active (1) or inactive (0) \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ackermann_msgs/AckermannDrive\n"
"## Driving command for a car-like vehicle using Ackermann steering.\n"
"#  $Id$\n"
"\n"
"# Assumes Ackermann front-wheel steering. The left and right front\n"
"# wheels are generally at different angles. To simplify, the commanded\n"
"# angle corresponds to the yaw of a virtual wheel located at the\n"
"# center of the front axle, like on a tricycle.  Positive yaw is to\n"
"# the left. (This is *not* the angle of the steering wheel inside the\n"
"# passenger compartment.)\n"
"#\n"
"# Zero steering angle velocity means change the steering angle as\n"
"# quickly as possible. Positive velocity indicates a desired absolute\n"
"# rate of change either left or right. The controller tries not to\n"
"# exceed this limit in either direction, but sometimes it might.\n"
"#\n"
"float32 steering_angle          # desired virtual angle (radians)\n"
"float32 steering_angle_velocity # desired rate of change (radians/s)\n"
"\n"
"# Drive at requested speed, acceleration and jerk (the 1st, 2nd and\n"
"# 3rd derivatives of position). All are measured at the vehicle's\n"
"# center of rotation, typically the center of the rear axle. The\n"
"# controller tries not to exceed these limits in either direction, but\n"
"# sometimes it might.\n"
"#\n"
"# Speed is the desired scalar magnitude of the velocity vector.\n"
"# Direction is forward unless the sign is negative, indicating reverse.\n"
"#\n"
"# Zero acceleration means change speed as quickly as\n"
"# possible. Positive acceleration indicates a desired absolute\n"
"# magnitude; that includes deceleration.\n"
"#\n"
"# Zero jerk means change acceleration as quickly as possible. Positive\n"
"# jerk indicates a desired absolute rate of acceleration change in\n"
"# either direction (increasing or decreasing).\n"
"#\n"
"float32 speed                   # desired forward speed (m/s)\n"
"float32 acceleration            # desired acceleration (m/s^2)\n"
"float32 jerk                    # desired jerk (m/s^3)\n"
;
  }

  static const char* value(const ::msgs_action::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_action::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drive);
      stream.next(m.engine_speed);
      stream.next(m.throttle);
      stream.next(m.car_gear);
      stream.next(m.brake);
      stream.next(m.handbrake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_action::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_action::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drive: ";
    s << std::endl;
    Printer< ::ackermann_msgs::AckermannDrive_<ContainerAllocator> >::stream(s, indent + "  ", v.drive);
    s << indent << "engine_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.engine_speed);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "car_gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_gear);
    s << indent << "brake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake);
    s << indent << "handbrake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handbrake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_ACTION_MESSAGE_VEHICLESTATE_H
