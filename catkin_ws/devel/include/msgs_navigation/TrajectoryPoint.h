// Generated by gencpp from file msgs_navigation/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef MSGS_NAVIGATION_MESSAGE_TRAJECTORYPOINT_H
#define MSGS_NAVIGATION_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_navigation
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : point()
    , point_number(0.0)
    , end_track(false)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , point_number(0.0)
    , end_track(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _point_type;
  _point_type point;

   typedef double _point_number_type;
  _point_number_type point_number;

   typedef uint8_t _end_track_type;
  _end_track_type end_track;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(X)
  #undef X
#endif
#if defined(_WIN32) && defined(Y)
  #undef Y
#endif
#if defined(_WIN32) && defined(KAPPA)
  #undef KAPPA
#endif
#if defined(_WIN32) && defined(ANGLE)
  #undef ANGLE
#endif
#if defined(_WIN32) && defined(LENGTH)
  #undef LENGTH
#endif
#if defined(_WIN32) && defined(SPEED)
  #undef SPEED
#endif
#if defined(_WIN32) && defined(KAPPA_DERIVATIVE)
  #undef KAPPA_DERIVATIVE
#endif

  enum {
    X = 0u,
    Y = 1u,
    KAPPA = 2u,
    ANGLE = 3u,
    LENGTH = 4u,
    SPEED = 5u,
    KAPPA_DERIVATIVE = 6u,
  };


  typedef boost::shared_ptr< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::msgs_navigation::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::msgs_navigation::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::msgs_navigation::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.point_number == rhs.point_number &&
    lhs.end_track == rhs.end_track;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e04038e6f3b9fe907134b6ecbe58bb7";
  }

  static const char* value(const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e04038e6f3b9fe9ULL;
  static const uint64_t static_value2 = 0x07134b6ecbe58bb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_navigation/TrajectoryPoint";
  }

  static const char* value(const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Clothoid data\n"
"\n"
"float64[] point\n"
"\n"
"uint8 X = 0\n"
"uint8 Y = 1\n"
"uint8 KAPPA = 2\n"
"uint8 ANGLE = 3\n"
"uint8 LENGTH = 4\n"
"uint8 SPEED = 5\n"
"uint8 KAPPA_DERIVATIVE = 6\n"
"\n"
"float64 point_number\n"
"bool end_track\n"
;
  }

  static const char* value(const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.point_number);
      stream.next(m.end_track);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_navigation::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_navigation::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.point[i]);
    }
    s << indent << "point_number: ";
    Printer<double>::stream(s, indent + "  ", v.point_number);
    s << indent << "end_track: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end_track);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_NAVIGATION_MESSAGE_TRAJECTORYPOINT_H
