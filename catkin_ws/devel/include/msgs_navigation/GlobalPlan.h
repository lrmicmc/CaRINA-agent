// Generated by gencpp from file msgs_navigation/GlobalPlan.msg
// DO NOT EDIT!


#ifndef MSGS_NAVIGATION_MESSAGE_GLOBALPLAN_H
#define MSGS_NAVIGATION_MESSAGE_GLOBALPLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace msgs_navigation
{
template <class ContainerAllocator>
struct GlobalPlan_
{
  typedef GlobalPlan_<ContainerAllocator> Type;

  GlobalPlan_()
    : header()
    , points()
    , road_options()  {
    }
  GlobalPlan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)
    , road_options(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _road_options_type;
  _road_options_type road_options;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LANEFOLLOW)
  #undef LANEFOLLOW
#endif
#if defined(_WIN32) && defined(STRAIGHT)
  #undef STRAIGHT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(CHANGELANELEFT)
  #undef CHANGELANELEFT
#endif
#if defined(_WIN32) && defined(CHANGELANERIGHT)
  #undef CHANGELANERIGHT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    LANEFOLLOW = 0u,
    STRAIGHT = 1u,
    RIGHT = 2u,
    LEFT = 3u,
    CHANGELANELEFT = 4u,
    CHANGELANERIGHT = 5u,
    UNKNOWN = 6u,
  };


  typedef boost::shared_ptr< ::msgs_navigation::GlobalPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_navigation::GlobalPlan_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalPlan_

typedef ::msgs_navigation::GlobalPlan_<std::allocator<void> > GlobalPlan;

typedef boost::shared_ptr< ::msgs_navigation::GlobalPlan > GlobalPlanPtr;
typedef boost::shared_ptr< ::msgs_navigation::GlobalPlan const> GlobalPlanConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_navigation::GlobalPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs_navigation::GlobalPlan_<ContainerAllocator1> & lhs, const ::msgs_navigation::GlobalPlan_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points &&
    lhs.road_options == rhs.road_options;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs_navigation::GlobalPlan_<ContainerAllocator1> & lhs, const ::msgs_navigation::GlobalPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_navigation::GlobalPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_navigation::GlobalPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_navigation::GlobalPlan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30bdb54aae74b679c913a2e5f20b612e";
  }

  static const char* value(const ::msgs_navigation::GlobalPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30bdb54aae74b679ULL;
  static const uint64_t static_value2 = 0xc913a2e5f20b612eULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_navigation/GlobalPlan";
  }

  static const char* value(const ::msgs_navigation::GlobalPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"geometry_msgs/Point[] points\n"
"int32[] road_options\n"
"\n"
"uint8 LANEFOLLOW=0\n"
"uint8 STRAIGHT=1\n"
"uint8 RIGHT=2\n"
"uint8 LEFT=3\n"
"uint8 CHANGELANELEFT=4\n"
"uint8 CHANGELANERIGHT=5\n"
"uint8 UNKNOWN=6\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msgs_navigation::GlobalPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.road_options);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_navigation::GlobalPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_navigation::GlobalPlan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "road_options[]" << std::endl;
    for (size_t i = 0; i < v.road_options.size(); ++i)
    {
      s << indent << "  road_options[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.road_options[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_NAVIGATION_MESSAGE_GLOBALPLAN_H
