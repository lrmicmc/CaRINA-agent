# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs_navigation/TrajectoryPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryPoint(genpy.Message):
  _md5sum = "6e04038e6f3b9fe907134b6ecbe58bb7"
  _type = "msgs_navigation/TrajectoryPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Clothoid data

float64[] point

uint8 X = 0
uint8 Y = 1
uint8 KAPPA = 2
uint8 ANGLE = 3
uint8 LENGTH = 4
uint8 SPEED = 5
uint8 KAPPA_DERIVATIVE = 6

float64 point_number
bool end_track
"""
  # Pseudo-constants
  X = 0
  Y = 1
  KAPPA = 2
  ANGLE = 3
  LENGTH = 4
  SPEED = 5
  KAPPA_DERIVATIVE = 6

  __slots__ = ['point','point_number','end_track']
  _slot_types = ['float64[]','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point,point_number,end_track

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point is None:
        self.point = []
      if self.point_number is None:
        self.point_number = 0.
      if self.end_track is None:
        self.end_track = False
    else:
      self.point = []
      self.point_number = 0.
      self.end_track = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.point))
      _x = self
      buff.write(_get_struct_dB().pack(_x.point_number, _x.end_track))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.point_number, _x.end_track,) = _get_struct_dB().unpack(str[start:end])
      self.end_track = bool(self.end_track)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.point)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.point.tostring())
      _x = self
      buff.write(_get_struct_dB().pack(_x.point_number, _x.end_track))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.point_number, _x.end_track,) = _get_struct_dB().unpack(str[start:end])
      self.end_track = bool(self.end_track)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dB = None
def _get_struct_dB():
    global _struct_dB
    if _struct_dB is None:
        _struct_dB = struct.Struct("<dB")
    return _struct_dB
